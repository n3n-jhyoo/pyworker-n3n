import dataclasses
import random
import inspect
from typing import Dict, Any

from lib.data_types import ApiPayload, JsonDataException



@dataclasses.dataclass
class TTSRequest(ApiPayload):
    text: str
    voice_name: str

    @classmethod
    def for_test(cls) -> "TTSRequest":
        """defines how create a payload for load testing"""
        texts = [
            "안녕하세요, 이 시스템은 텍스트를 음성으로 변환하는 TTS 기능을 테스트하기 위한 예시 문장입니다.",
            "오늘은 날씨가 흐리고 비가 올 예정이니 외출하실 때에는 우산을 꼭 챙기시기 바랍니다.",
            "인공지능 기술은 다양한 분야에서 활용되고 있으며, 특히 자연어 처리 분야에서 큰 성과를 내고 있습니다.",
            "사용자가 입력한 텍스트를 자연스럽고 감정 표현이 풍부한 음성으로 변환하는 것이 이 시스템의 주요 목표입니다.",
            "이 문장은 음성 합성 엔진의 성능을 평가하기 위한 테스트 문장으로, 다양한 발음과 억양을 포함하고 있습니다.",
            "최근에는 감정을 표현할 수 있는 TTS 모델이 개발되면서 더욱 풍부한 사용자 경험을 제공할 수 있게 되었습니다.",
            "텍스트 길이에 따라 음성 생성 시간이 달라질 수 있으므로, 다양한 길이의 문장을 활용해 테스트하는 것이 중요합니다.",
            "본 문장은 시스템이 길고 복잡한 문장을 얼마나 자연스럽게 처리할 수 있는지를 확인하기 위해 만들어졌습니다.",
            "이 예시는 부하 테스트를 위해 준비된 문장으로, 실제 서비스 환경에서 발생할 수 있는 입력을 가정하고 있습니다.",
            "사용자 맞춤형 음성을 생성하기 위해서는 화자 정보나 감정 태그 등의 추가 입력도 고려해야 할 수 있습니다.",
            "테스트 문장입니다.",
            "요즘 날씨가 정말 덥네요.",
            "인공지능은 빠르게 발전하고 있어요.",
            "이 문장은 TTS 시스템을 평가하기 위한 것입니다.",
            "밥 먹었어?",
            "안녕하세요, 무엇을 도와드릴까요?",
            "오늘은 어떤 계획이 있나요?",
            "이건 성능 테스트용 예시 문장입니다.",
            "한국어 TTS 테스트 중입니다.",
            "짧은 문장도 처리해야 합니다."
        ]
        return cls(text=random.choice(texts), voice_name="sample_female")

    @classmethod
    def from_json_msg(cls, json_msg: Dict[str, Any]) -> "TTSRequest":
        """
        defines how to transform JSON data to AuthData and payload type,
        in this case `InputData` defined above represents the data sent to the model API.
        AuthData is data generated by the serverless system in order to authenticate payloads.
        In this case, the transformation is simple and 1:1. That is not always the case. See comfyui's PyWorker
        for more complicated examples
        """
        errors = {}
        for param in inspect.signature(cls).parameters:
            if param not in json_msg:
                errors[param] = "missing parameter"
        if errors:
            raise JsonDataException(errors)
        return cls(
            **{
                k: v
                for k, v in json_msg.items()
                if k in inspect.signature(cls).parameters
            }
        )
    
    
    def generate_payload_json(self) -> Dict[str, Any]:
        """defines how to convert an ApiPayload to JSON that will be sent to model API"""
        return dataclasses.asdict(self) 
    
    def count_workload(self) -> int:
        return len(self.text)